name: US Game Hub CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: 数据验证和测试
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install -g ajv-cli
        npm install -g html-validate
        npm install -g lighthouse-ci
        
    - name: Validate JSON Schema
      run: |
        echo "验证游戏数据 JSON Schema..."
        ajv validate -s data/game-schema.json -d data/games.json
        
    - name: Validate HTML
      run: |
        echo "验证 HTML 文件..."
        html-validate index.html game.html category.html privacy.html
        
    - name: Check file sizes
      run: |
        echo "检查文件大小..."
        find . -name "*.html" -exec wc -c {} + | awk '$1 > 100000 {print "Warning: " $2 " is larger than 100KB"}'
        find . -name "*.json" -exec wc -c {} + | awk '$1 > 500000 {print "Warning: " $2 " is larger than 500KB"}'
        
    - name: Validate robots.txt
      run: |
        echo "验证 robots.txt..."
        if [ ! -f "robots.txt" ]; then
          echo "Error: robots.txt not found"
          exit 1
        fi
        
    - name: Check manifest.json
      run: |
        echo "验证 PWA manifest..."
        if [ ! -f "manifest.json" ]; then
          echo "Error: manifest.json not found"
          exit 1
        fi
        
  lighthouse:
    name: Lighthouse 性能测试
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
      
    - name: Build static site
      run: |
        mkdir -p public
        cp -r * public/ 2>/dev/null || :
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun --config .lighthouserc.json || echo "Lighthouse CI completed with warnings"
      env:
        LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        
  security:
    name: 安全检查
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for secrets
      run: |
        echo "检查敏感信息..."
        if grep -r -i "api[_-]key\|password\|secret\|token" --exclude-dir=.git --exclude="*.yml" . ; then
          echo "Warning: Potential secrets found"
          exit 1
        fi
        
    - name: Check iframe security
      run: |
        echo "检查 iframe 安全性..."
        if grep -r "sandbox=" *.html | grep -v "allow-scripts\|allow-same-origin"; then
          echo "Error: Unsafe iframe sandbox detected"
          exit 1
        fi
        
    - name: Validate external links
      run: |
        echo "检查外部链接..."
        # Extract and validate key external URLs
        python3 -c "
import json
with open('data/games.json', 'r') as f:
    data = json.load(f)
    
urls = [game['iframeUrl'] for game in data['games']]
print(f'Found {len(urls)} game URLs to validate')

# Check for suspicious domains
suspicious = ['localhost', '127.0.0.1', 'file://']
for url in urls:
    for sus in suspicious:
        if sus in url:
            print(f'Warning: Suspicious URL found: {url}')
"
        
  deploy:
    name: 部署到 Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [validate, lighthouse, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate sitemap
      run: |
        echo "生成 sitemap.xml..."
        python3 -c "
import json
import datetime

with open('data/games.json', 'r') as f:
    data = json.load(f)

sitemap = '''<?xml version='1.0' encoding='UTF-8'?>
<urlset xmlns='http://www.sitemaps.org/schemas/sitemap/0.9'>
  <url>
    <loc>https://usgamehub.icu/</loc>
    <lastmod>{}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>'''.format(datetime.datetime.now().strftime('%Y-%m-%d'))

# Add game pages
for game in data['games']:
    sitemap += f'''
  <url>
    <loc>https://usgamehub.icu/game.html?id={game['id']}</loc>
    <lastmod>{game['updatedAt'][:10]}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>'''

# Add category pages
categories = ['puzzle', 'action', 'multiplayer', 'cards', 'sports', 'strategy']
for cat in categories:
    sitemap += f'''
  <url>
    <loc>https://usgamehub.icu/category.html?cat={cat}</loc>
    <lastmod>{datetime.datetime.now().strftime('%Y-%m-%d')}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>'''

sitemap += '\n</urlset>'

with open('sitemap.xml', 'w') as f:
    f.write(sitemap)
    
print('Sitemap generated successfully')
"
        
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages publish . --project-name=usgamehub-icu
        
    - name: Create deployment comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ Preview deployed successfully! Check the deployment at Cloudflare Pages.'
          })
          
  report:
    name: 生成报告
    runs-on: ubuntu-latest
    needs: [validate, lighthouse, security]
    if: always()
    
    steps:
    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `CI Failed - ${context.payload.head_commit.message}`;
          const body = `
          ## CI Failure Report
          
          **Commit:** ${context.sha}
          **Branch:** ${context.ref}
          **Workflow:** ${context.workflow}
          **Run:** ${context.runNumber}
          
          请检查以下步骤的错误信息：
          - 数据验证和测试
          - Lighthouse 性能测试 
          - 安全检查
          
          **Action:** ${context.payload.head_commit.url}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['ci:failed', 'bug']
          });